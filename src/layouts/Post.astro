---
// import { fade } from 'astro:transitions';
import BaseHead from "../components/BaseHead.astro";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import AnalyticsTag from "../components/AnalyticsTag.astro";
import { GitHubIssueComments } from "../components/Comments";
import { CreatedModifiedLabel } from "../components/CreatedModifiedLabel";
import socialBanner from "../assets/social-banner.webp";

import { Image } from "astro:assets";
import type { ImageMetadata } from "astro";
import AdditionalReading from "../components/AdditionalReading.astro";
import CategoryLink from "../components/CategoryLink.astro";
import { EditOnGitHubLink } from "../components/EditOnGitHubLink";
// import { moveInOutTransition } from "../components/TransitionAnimations.ts";
import { fade } from "astro:transitions";
import { ShareCounters } from "../components/ShareUI";
import PostLinkedData from "../components/Seo/PostLinkedData.astro";

type Props = {
  sourcePath: string;
  children: any[];

  slug: string;

  frontmatter?: {
    title: string;
    subTitle?: string;
    commentsKeyOverride?: string;
    date?: string;
    modified?: string;
    tags?: string[];
    social_image?: unknown;
    cover?: unknown;
    cover_full_width?: unknown;
    category?: string;
    related?: string[];
  };
};

const {
  title,
  subTitle,
  cover,
  cover_full_width,
  category,
  date,
  modified,
  commentsKeyOverride,
  related,
  social_image,
} = Astro.props.frontmatter! || Astro.props;

const slug = Astro.props.slug;

const modDate = modified ? new Date(modified) : null;
const modTime = modDate ? modDate.toISOString().split("T")[0] : "";
const pubTime = date ? new Date(date).toISOString().split("T")[0] : "";

// Add type guard for ImageMetadata
const isImageMetadata = (img: any): img is ImageMetadata =>
  typeof img === "object" && "src" in img && "width" in img && "height" in img;

const coverUrl = isImageMetadata(cover)
  ? (cover as ImageMetadata)
  : typeof cover === "string"
    ? cover
    : isImageMetadata(social_image)
      ? social_image
      : socialBanner;

const commentsKey = commentsKeyOverride || new URL(Astro.request.url).pathname;

const responsiveImgSizes_fullWidth = {
  widths: [720, 1280, 1920],
  sizes: `
    (max-width: 600px) 100vw,
    (max-width: 1200px) 80vw,
    60vw`,
};
const responsiveImgSizes_breakRight = {
  widths: [800, 1440, 1920],
  sizes: `
    (max-width: 600px) 100vw,
    (max-width: 1200px) 80vw,
    60vw`,
};
---

<html lang="en" transition:name="root">
  <head>
    <BaseHead title={title} description={`${subTitle}`} image={coverUrl} />
    {modTime && <meta http-equiv="last-modified" content={modTime} />}
    {modTime && <meta property="article:modified_time" content={modTime} />}
    {pubTime && <meta property="article:published_time" content={pubTime} />}
  </head>
  <body transition:animate={fade({ duration: "0.285s" })}>
    <Header className="content-grid article" date={date} modified={modified} />
    <main
      data-pagefind-body
      class="content-grid article h-entry h-recipe"
      style={{}}
    >
      {
        title && (
          <h1
            class="p-name"
            transition:name="page.h1"
            data-pagefind-meta="title"
            style={{
              viewTransitionName: `article-${`${slug}`.replace(/^\/*|\/*$/g, "")}`,
            }}
          >
            {title}
          </h1>
        )
      }
      {
        subTitle && (
          <h2 class="p-summary" transition:name="page.h2">
            {subTitle}
          </h2>
        )
      }

      <aside class="skinny screenshot-hidden">
        <div class="info">
          <CreatedModifiedLabel client:idle date={date} modified={modified} />
          <CategoryLink category={category} class:list={"p-category"} />
        </div>
      </aside>

      {
        cover_full_width &&
        typeof cover_full_width === "object" &&
        "src" in cover_full_width ? (
          <Image
            class="full-width flow u-photo banner-image"
            src={cover_full_width as ImageMetadata}
            alt={title}
            format="webp"
            {...responsiveImgSizes_fullWidth}
          />
        ) : (
          cover &&
          typeof cover === "object" &&
          "src" in cover && (
            <div class="hero-image">
              <div class="hero-image-wrapper">
                <Image
                  class="u-photo"
                  src={cover as ImageMetadata}
                  alt={title}
                  {...responsiveImgSizes_breakRight}
                />
              </div>
            </div>
          )
        )
      }

      <slot />

      <ShareCounters
        client:only="react"
        url={Astro.request.url}
        className="share-counter-links"
      />
    </main>

    <EditOnGitHubLink
      sourcePath={Astro.props.sourcePath}
      repoUri="https://github.com/justsml/dans-blog/tree/main/src/content/posts"
    />

    <AdditionalReading
      slugs={related}
      excludeSlugs={[slug]}
      className="default-links"
    />

    <div class="comments-wrapper full-width default-links">
      <GitHubIssueComments client:only="react" path={commentsKey} />
    </div>
    <Footer />
    <AnalyticsTag />
  </body>
  <PostLinkedData
    title={title}
    description={subTitle!}
    date={pubTime}
    modified={modTime}
    slug={slug}
    tags={Astro.props.frontmatter?.tags?.join(", ") ?? ""}
    imageUrl={coverUrl}
  />
  <link
    rel="stylesheet"
    href="/files/fonts.css"
    media="print"
    onload="this.media='all'"
  />
  <script>
    import { QuestionStore } from "../components/QuizUI/QuestionStore";

    let $interval: NodeJS.Timeout | null = null;
    let intCount = 0;
    // Hackety hack to update the score-wrapper on quiz pages
    window.__updateCounts = () => {
      const quizUI = document.querySelectorAll(".quiz-ui");
      const questions = document.querySelectorAll("main .challenge");
      const isQuizPage = quizUI.length > 0;

      if (!isQuizPage || questions.length <= 0) return false; // Not a quiz page

      // window?.__superHackFix_patchOptionsListWithActualHeight();

      const scoreEls = document.querySelectorAll(".score");
      const scoreEl = scoreEls[0];
      const scoreWrapper = document.querySelector(".score-wrapper");
      const scoreLabel = document.querySelector(".score label");
      const correct = document.querySelectorAll("main .challenge.correct");
      const congratsMsg = document.querySelector(".congrats-message");

      // Add up the tries from [data-answer-count]
      const questionStore = getQuestionStore();

      // Use question store **if available**
      const tries: number = questionStore
        ? questionStore.sumOfTries()
        : getAnswerCount();

      const isPerfect =
        questions.length === correct.length && tries === questions.length;

      if (scoreEl?.parentNode?.nodeName !== "BODY")
        document.body.appendChild(scoreEl!);

      if (isPerfect) {
        scoreEl?.classList.add("perfect");
        quizUI[0].classList.add("perfect");
      }

      if (scoreEls.length >= 2) console.error("Multiple score elements found");
      if (!scoreLabel) {
        console.error("Expected score label, not found");
        return false;
      }
      if (correct.length > 0) scoreEls[0].classList.add("active");

      if (questions.length === correct.length) {
        scoreEl.classList.add("all-correct");
        if (congratsMsg) {
          const winningMessage = isPerfect ? "WOW! Perfect!" : "All correct!";
          const hTag = isPerfect ? "h2" : "h3";
          congratsMsg.innerHTML = `<${hTag}>${winningMessage} ${correct.length} / ${questions.length} ${tries > 0 ? `<sup>(${tries} tries)</sup>` : ""}</${hTag}>`;
        }
        scoreWrapper?.classList.toggle("pulse");
        scoreEl?.classList.add("success");
      } else {
        scoreLabel.innerHTML = `${correct.length} / ${questions.length} ${tries > 0 ? `<sup>(${tries} tries)</sup>` : ""}`;
      }
      return true;
    };

    function getQuestionStore() {
      const store = QuestionStore(window.location.pathname);
      if (!store) return null;
      return store;
    }

    document.addEventListener("astro:page-load", function () {
      const quiz = document.querySelector(".quiz-ui");
      __checkForEmptyShareCounts();
      if (quiz) {
        // window?.__superHackFix_patchOptionsListWithActualHeight();
        const questionStore = getQuestionStore();
        const resetButton = document.querySelector("button.reset-quiz");
        if (resetButton) {
          resetButton.addEventListener("click", () => {
            // console.log("Resetting quiz state for", location.pathname);
            questionStore?.reset();
            location.reload();
          });
        }

        // @ts-ignore fucking type errors
        $interval = setInterval(() => {
          intCount++;

          window.__updateCounts();

          if (intCount > 12) {
            // console.warn("Too many iterations, stopping interval");
            clearInterval($interval!);
            return;
          }
        }, 100);

        quiz.addEventListener(
          "mousedown",
          () => {
            clearInterval($interval!);
          },
          { once: true },
        );
        quiz.addEventListener("click", () => {
          clearInterval($interval!);
          window.__updateCounts();
        });
      }
    });
    function getAnswerCount() {
      return [...document.querySelectorAll("[data-answer-count")].reduce(
        (acc, q) => {
          const tries = parseInt(
            q.getAttribute("data-answer-count") || "0",
            10,
          );
          return acc + tries;
        },
        0,
      );
    }

    /**
     * This exists to patch the height of the options list - since we added the flip card effect, not all browsers are smart enough about calculating the height of the option elements.
     */
    window.__superHackFix_patchOptionsListWithActualHeight =
      function __superHackFix_patchOptionsListWithActualHeight(
        quizOptions: HTMLElement[] | null = null,
      ) {
        quizOptions ??= [
          ...document.querySelectorAll<HTMLElement>(".quiz-options"),
        ];
        console.log("patchRealHeight", quizOptions.length);
        quizOptions.forEach(function (optionPanel) {
          try {
            let childHeights =
              optionPanel &&
              Array.from(optionPanel.querySelectorAll("a")).map(
                function (child) {
                  return child.getBoundingClientRect().height;
                },
              );
            const sumHeight =
              childHeights && childHeights.reduce((a, b) => a + b, 0);
            console.log("sumHeight", sumHeight);
            if (optionPanel.parentElement)
              optionPanel.parentElement.style.height = sumHeight + "px";
          } catch (e) {
            console.error("Error patching options list", e);
          }
        });
        return quizOptions;
      };

    function __checkForEmptyShareCounts() {
      const shareCounters = document.querySelector(".share-counters");
      const emptySpans = shareCounters?.querySelectorAll("span:empty");

      if (emptySpans && emptySpans.length >= 4) {
        shareCounters?.classList.add("hidden", "empty", "no-share-counts");
      }
      return {
        shareCounters,
        emptySpans,
      };
    }
    // @ts-ignore
    window.__checkForEmptyShareCounts = __checkForEmptyShareCounts;
  </script>
</html>

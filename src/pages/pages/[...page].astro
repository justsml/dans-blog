---
import type { Page, PagePath, ArticlePost } from "../../types";
import { PostCollections, getArticleSortFn } from "../../shared/dataCache";
import { pageSize } from "../../shared/pagination";
import { ArticleCard } from "../../components/ArticleCard";
import { PaginateFunction } from "astro";
// import { RefreshCw } from "lucide-react";

export const partial = true;

type Props = {
  page: Page<ArticlePost>;
  pageUrlSuffix: string;
  sortKey: string;
  field: string;
  direction: "asc" | "desc";
};

export async function getStaticPaths({
  paginate,
}: {
  paginate: PaginateFunction;
}) {
  const sortKeys = [
    ["date", "asc"],
    ["date", "desc"],
    ["modified", "asc"],
    ["modified", "desc"],
  ] as const;

  const pages = sortKeys.flatMap(([field, direction]) => {
    const posts = PostCollections.getPosts() as ArticlePost[];
    const sortFn = getArticleSortFn(field, direction);
    const sortedPosts = posts.concat().sort(sortFn);

    const pageData = paginate(PostCollections.getStaticPaths(sortedPosts), {
      pageSize,
    });
    // console.warn("ðŸ“„ PAGE DATA", pageData)

    const fixed = pageData.flatMap((p: any) => ({
      ...p,
      props: {
        ...p.props,
        // page: `${field}-${direction}`,
        sortKey: `${field}-${direction}`,
        pageUrlSuffix: `-${field}${direction === "asc" ? "" : "-desc"}.html`,
        field,
        direction,
      },
      params: {
        ...p.params,
        pageUrlSuffix: `-${field}${direction === "asc" ? "" : "-desc"}.html`,
        page: `${p.params.page ?? "1"}-${field}${direction === "asc" ? "" : "-desc"}`,
        sortKey: `${field}-${direction}`,
        field,
        direction,
      },
    }));

    // console.warn("ðŸ“„ FIXED", fixed);
    return fixed;
  });
  // console.warn("ðŸ“„ PAGES", pages);
  return pages as PagePath[];
}

const {
  page: { data, currentPage, lastPage, url },
  pageUrlSuffix,
} = Astro.props;
// console.log("ðŸ“„ PROPS", Astro.props);
// console.log("ðŸ“„ NEXT", `${url.next ? url.next + pageUrlSuffix :url.next}`);

// , currentPage, start, end, size, lastPage, total, url
// console.log("ðŸ“„ Page", data);
let nextUrl: string | null = null;
// const head = (arr: any[], n: number) => arr.slice(0, n);

const isLast = currentPage === lastPage;
if (!isLast) {
  // const dirSuffix = direction === "asc" ? "" : "-desc";
  nextUrl = `${url.next ? url.next + pageUrlSuffix : url.next}`;
  // prevUrl = `${url.prev ? url.prev + pageUrlSuffix : url.prev}`;
}

const nextPageAttrs = nextUrl
  ? {
      "hx-get": nextUrl,
      "hx-trigger": "revealed",
      "hx-swap": "afterend",
    }
  : {};
---

{
  data.map(({ props }: any, index) =>
    index === data.length - 1 ? (
      <ArticleCard
        article={props as ArticlePost}
        width={200}
        {...nextPageAttrs}
      />
    ) : (
      <ArticleCard article={props as ArticlePost} width={200} />
    )
  )
}

{/*
{nextUrl && (
  <div class="pagination load-more">
    <div class="spinner"><RefreshCw /></div>
    <a {...nextPageAttrs} hx-trigger="click" hx-swap="beforebegin" class="button">Load More</a>
  </div>
)}


<style>
  .spinner {
    display: none;
  }
  .load-more.loading {
    .spinner {
      display: block;
    }
    a {
      display: none;
    }
  }
</style>
<script>

  const getLastArticleCard = () => document.querySelector(".article-card:last-of-type");
  const isNextPageAvailable = () => {
    const lastArticleCard = getLastArticleCard();
    return lastArticleCard && lastArticleCard.getAttribute("hx-get") != null;
  };
  document.addEventListener("astro:page-load", function () {
    const loadMore = document.querySelector(".pagination.load-more");

    if (loadMore) {
      loadMore.addEventListener("click", () => {
        if (!isNextPageAvailable()) return;
        loadMore.classList.add("loading");
        console.info(`Last article card's next page:`, getLastArticleCard()?.getAttribute("hx-get"));
        setTimeout(() => {
          loadMore.classList.remove("loading");
        }, 2000);
      });
    }
  });
</script>
*/}


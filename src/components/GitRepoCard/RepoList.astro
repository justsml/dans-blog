---
import { ossContributions } from "../../shared/ossData.ts";
import { JSX } from "astro/jsx-runtime";
import { RepoCard } from "./RepoCard.tsx";
import { GITHUB_HANDLE } from "../../consts.ts";
import { makeLogs } from "../LogHelper.ts";
import { fetchUserPullRequests } from "../../shared/githubGqlApi.ts";
import { _isValidRepo } from "../../shared/githubGqlApi.ts";
import "./GitContribution.css";
// import clsx from "clsx";
import { cx } from "class-variance-authority";
import { Contribution, UserPullRequestData } from "../../types.ts";

const { GITHUB_TOKEN } = process.env;

type Props = {
  className?: string;
};

if (!GITHUB_TOKEN || GITHUB_TOKEN.length < 1)
  throw new Error("GITHUB_TOKEN is required to fetch GitHub data");

const log = makeLogs("ossContributions");

log("ossContributions", ossContributions.length);
const className = cx("contrib-grid", Astro.props.className);

type RepoData = {
  pr: UserPullRequestData;
  contrib: Contribution;
};

let loadedRepos: RepoData[] = (await Promise.all(
  ossContributions.flatMap(async (contrib) => {
    const targetRepo = contrib.renamed ?? contrib.repo;
    if (!_isValidRepo(targetRepo)) return [];
    const pr = await fetchUserPullRequests(targetRepo, GITHUB_HANDLE);
    log("pr", pr);

    return {
      pr,
      contrib,
    };
  }),
)) as RepoData[];

loadedRepos = loadedRepos.sort(
  (a, b) => b.pr.repository.stars! - a.pr.repository.stars!,
);
console.log("loadedRepos", JSON.stringify(loadedRepos, null, 2));
---

<p class="text-muted-foreground">This page was last updated {new Date().toLocaleDateString()}</p>

<div {...{ className }}>
  {
    loadedRepos.map(async ({ contrib, pr }) => {
      const targetRepo = contrib.renamed ?? contrib.repo;
      if (!_isValidRepo(targetRepo)) return <div />;

      log("pr", pr);

      return (
        <RepoCard
          defaultPullData={pr}
          contribution={contrib}
          author={GITHUB_HANDLE}
        />
      );
    })
  }
</div>

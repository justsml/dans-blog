---
import { ViewTransitions } from "astro:transitions";
import type { ImageMetadata } from "astro";
import pkg from "../../package.json";
import { SITE_TITLE, SITE_SEO_DESCRIPTION } from "../consts";
import socialBanner from "../assets/social-banner.webp";
// import { selfieUrl } from "astro-selfie";
// Import the global.css file here so that it is included on
// all pages through the use of the <BaseHead /> component.
import "@/styles/nav.css";
import "@/styles/layout.css";
import "@/styles/global.css";

interface Props {
  title: string;
  description: string | undefined;
  image?: string | ImageMetadata | undefined;
}

// const slug = Astro.url.pathname.replace(/^\/*|\/*$/g, "");
// const isHomePage = slug === "/" || slug.length < 2;

const canonicalURL = new URL(Astro.url.pathname, Astro.site);

let { title, description, image } = Astro.props;


if (description === "undefined") description = undefined;

if (
  !image ||
  (typeof image === "string" ? image.length <= 1 : !("src" in image))
) {
  image = socialBanner;
}

const siteTitle = title || SITE_TITLE;
const siteDescription = description || SITE_SEO_DESCRIPTION;

const version = pkg.version;

const imgSrc = typeof image === "string" ? image : image?.src;
const imageWidth = typeof image !== "string" ? image?.width : null;
const imageHeight = typeof image !== "string" ? image?.height : null;
---

<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<meta name="site-version" content={version ?? "0.0.0"} />
<link rel="preconnect" href="https://unpkg.com" />
<link rel="preconnect" href="https://posthog.com" />
<link rel="canonical" href={canonicalURL} />

{/*Primary Meta Tags*/}
<slot name="title">
  <title>{title ?? siteTitle}</title>
  <meta name="title" content={title ?? siteTitle} />
  <meta property="twitter:title" content={title ?? siteTitle} />
  <meta property="og:title" content={title ?? siteTitle} />
</slot>
<slot name="description">
  {
    siteDescription && (
      <meta name="description" content={description ?? siteDescription} />
    )
  }
  {
    siteDescription && (
      <meta property="twitter:description" content={siteDescription} />
    )
  }
  {
    siteDescription && (
      <meta property="og:description" content={siteDescription} />
    )
  }
</slot>

{/*Open Graph / Facebook*/}
<meta name="fediverse:creator" content="@justsml@mastodon.social" />
<meta name="bsky:creator" content="@justsml.bsky.social" />
<meta property="og:type" content="website" />
<meta property="og:url" content={canonicalURL} />
{imgSrc && <meta property="og:image" content={new URL(imgSrc, Astro.url)} />}
{imageWidth && <meta property="og:image:width" content={`${imageWidth}`} />}
{imageHeight && <meta property="og:image:height" content={`${imageHeight}`} />}

{/*Twitter*/}
<meta property="twitter:site" content="@justsml" />
<meta name="twitter:creator" content="@justsml" />
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={canonicalURL} />
{
  imgSrc && (
    <meta property="twitter:image" content={new URL(imgSrc, Astro.url)} />
  )
}

<link rel="apple-touch-icon" sizes="72x72" href="/icons/apple-icon-72x72.png" />
<link
  rel="apple-touch-icon"
  sizes="120x120"
  href="/icons/apple-icon-120x120.png"
/>
<link
  rel="apple-touch-icon"
  sizes="180x180"
  href="/icons/apple-icon-180x180.png"
/>

<link
  rel="icon"
  type="image/webp"
  sizes="48x48"
  href="/icons/icon-48x48.webp"
/>
<link
  rel="icon"
  type="image/webp"
  sizes="256x256"
  href="/icons/icon-256x256.webp"
/>
<link
  rel="icon"
  type="image/webp"
  sizes="512x512"
  href="/icons/icon-512x512.webp"
/>


<script>
  import globalSafe from "globalthis";

  const global = globalSafe();
  const isHomePage = global.location.pathname === "/";
  if (global.document && !global.document.querySelector("script[data-x-htmx-tag]") ) {
    // add script here
    const scriptEl = document.createElement("script");
    scriptEl.setAttribute("is", "inline");
    scriptEl.setAttribute("data-x-htmx-tag", "");
    scriptEl.setAttribute("defer", "");
    scriptEl.setAttribute("async", "");
    scriptEl.setAttribute(
      "src",
      "https://unpkg.com/htmx.org@2.0.2"
    );
    scriptEl.setAttribute(
      "integrity",
      "sha384-Y7hw+L/jvKeWIRRkqWYfPcvVxHzVzn5REgzbawhxAuQGwX1XWe70vji+VSeHOThJ"
    );
    scriptEl.setAttribute("crossorigin", "anonymous");

    document.addEventListener("astro:page-load", function () {
      console.log("Adding htmx script to page", global.location.pathname);
      setTimeout(() => {
        document.body.appendChild(scriptEl);
      }, isHomePage ? 3 : 1000);

      // refresh htmx on page load
      // @ts-expect-error - htmx is a global
      global.htmx && global.htmx.process(document.body);
    });
  }
</script>

<ViewTransitions fallback="none" />

<style is:global>
  @keyframes slideUp {
    0% {
      opacity: 0;
      transform: translateY(-100px), scale(1.25);
    }
    100% {
      opacity: 1;
      transform: translateY(0) scale(1);
    }
  }

  @view-transition {
    navigation: auto;
  }

  /* Customize the default animation behavior */

  ::view-transition-group(root) {
    animation-duration: 0.35s;
  }

  /* Create a custom animation */

  @keyframes move-out {
    100% {
      transform: translateY(3rem) scale(0.9);
      opacity: 0;
    }
    30% {
      transform: translateY(2rem) scale(0.96);
      opacity: 0.3;
    }
    5% {
      opacity: 0.95;
    }
  }

  @keyframes move-in {
    /* from {
        transform: translateY(-120%) scale(0.9);
    } */

    100% {
      transform: translateY(0%) scale(1);
      opacity: 1;
    }
  }

  /* Apply the custom animation to the old and new page states */

  /* ::view-transition-old(root) {
    animation: 0.35s ease-in both move-in;
  }

  ::view-transition-new(root) {
    animation: 0.35s ease-in both move-out;
  } */
</style>

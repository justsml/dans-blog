---
import * as cheerio from "cheerio";
import { extname } from "node:path";
import { Code } from "astro-expressive-code/components";
import "../../../public/styles/gist-embed.css";
import { getGist } from "./getGist.ts";

export type Props = {
  path: string;
  disableStyles?: boolean;
  disableTruncating?: boolean;
};

const { props } = Astro;
const { disableTruncating } = props;

let gist: any;
// let loadedFromCache = true;
gist = await getGist(props.path, {
  secretToken: process.env.GITHUB_TOKEN!,
  truncate: !disableTruncating,
  includeDefaultCss: false,
  username: "justsml",
}).catch((error) => {
  console.error("\n\n\nðŸš¨ Failed to load gist", error);
  return null;
});
if (!gist) {
  throw new Error("Failed to load gist");
}
// const stylesheetUrl = gist?.stylesheet;

// console.dir(omit(gist, ['div']), "gist Raw");
// if (gist?.files?.length >= 2) {
//   console.warn("Gist has multiple files: %o", gist.div);
// }

let gists: Record<string, string> = {};

if (gist?.files && gist.files.length >= 1) {
  const $ = cheerio.load(gist.div);
  gist?.files?.forEach((file: string) => {
    const $gist = $(`[data-tagsearch-path="${file}"]`);
    const rawText = $gist
      .text()
      .replaceAll("\n\n", "\n")
      .replaceAll("\n\n", "\n");
    gists[file] = rawText;
    // console.log("Gist File", file, rawText);
  });
  // const $gist = $("[data-tagsearch-path=\"fetch-retry-with-curry.js\"]");
}
---

{
  gists &&
    Object.entries(gists).map(([fileName, rawCode]) => (
      <Code
        code={rawCode}
        title={fileName ?? "script.js"}
        lang={extname(fileName).slice(1)}
      />
    ))
}
